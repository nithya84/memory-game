service: memory-game-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${self:provider.stage}
    USE_MOCK_AI: ${self:custom.environment.${self:provider.stage}.USE_MOCK_AI}
    REGION: ${self:provider.region}
    S3_BUCKET: ${self:custom.bucketName}
    CLOUDFRONT_DOMAIN: !GetAtt CloudFrontDistribution.DomainName
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    THEMES_TABLE: ${self:service}-themes-${self:provider.stage}
    GAMES_TABLE: ${self:service}-games-${self:provider.stage}
    SESSIONS_TABLE: ${self:service}-sessions-${self:provider.stage}
    JWT_SECRET: ${self:custom.environment.${self:provider.stage}.JWT_SECRET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-*-${self:provider.stage}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-*-${self:provider.stage}/index/*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:custom.bucketName}/*"
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
          Resource:
            - "arn:aws:bedrock:${self:provider.region}::foundation-model/amazon.titan-image-generator-v2:0"
            - "arn:aws:bedrock:${self:provider.region}::foundation-model/anthropic.claude-3-haiku-20240307-v1:0"

plugins:
  - serverless-offline

custom:
  bucketName: memory-game-images-${self:provider.stage}-${sls:instanceId}
  frontendBucketName: memory-game-frontend-${self:provider.stage}
  environment:
    local:
      USE_MOCK_AI: true
      JWT_SECRET: development-secret-key-change-in-production
    dev:
      USE_MOCK_AI: true
      JWT_SECRET: development-secret-key-change-in-production
    prod:
      USE_MOCK_AI: false
      JWT_SECRET: ${env:JWT_SECRET_PROD, 'placeholder-will-be-overridden'}
  serverless-offline:
    httpPort: 3001
    host: 0.0.0.0

functions:
  health:
    handler: dist/src/handlers/health.handler
    events:
      - http:
          path: /health
          method: get
          cors: true
  
  register:
    handler: dist/src/handlers/auth.register
    events:
      - http:
          path: /auth/register
          method: post
          cors: true
  
  login:
    handler: dist/src/handlers/auth.login
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
  
  generateTheme:
    handler: dist/src/handlers/themes.generateTheme
    timeout: 300
    events:
      - http:
          path: /themes/generate
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  
  getThemes:
    handler: dist/src/handlers/themes.getThemes
    events:
      - http:
          path: /themes
          method: get
          cors: true

package:
  patterns:
    - '../node_modules/**'
    - 'dist/**'
    - '!../node_modules/aws-sdk/**'
    - '!../node_modules/@types/**'
    - '!../node_modules/**/*.d.ts'
    - '!../node_modules/**/test/**'
    - '!../node_modules/**/tests/**'
    - '!../node_modules/**/*.md'
    - '!../node_modules/**/README*'
    - '!../node_modules/**/docs/**'
    - '!../node_modules/**/*.map'

resources:
  Resources:
    # S3 Bucket for image storage
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

    # Frontend S3 Bucket
    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

    # CloudFront Origin Access Control
    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: ${self:custom.bucketName}-OAC
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    # CloudFront Distribution for image serving
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: ImagesOrigin
              DomainName: !GetAtt ImagesBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: ''
              OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            - Id: FrontendOrigin
              DomainName: !GetAtt FrontendBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: ''
              OriginAccessControlId: !Ref CloudFrontOriginAccessControl
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: FrontendOrigin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
          CacheBehaviors:
            - PathPattern: "/images/*"
              TargetOriginId: ImagesOrigin
              ViewerProtocolPolicy: redirect-to-https
              CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
              OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
              ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
          PriceClass: PriceClass_100  # Use only North America and Europe edge locations

    # S3 Bucket Policy for CloudFront access only
    ImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImagesBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: 's3:GetObject'
              Resource: !Sub "arn:aws:s3:::${ImagesBucket}/*"
              Condition:
                StringEquals:
                  "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
      DependsOn:
        - ImagesBucket
        - CloudFrontDistribution

    # Frontend Bucket Policy for CloudFront access only
    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref FrontendBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: 's3:GetObject'
              Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"
              Condition:
                StringEquals:
                  "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
      DependsOn:
        - FrontendBucket
        - CloudFrontDistribution

    # Users Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Themes Table  
    ThemesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-themes-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: themeStyle
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ThemeStyleIndex
            KeySchema:
              - AttributeName: themeStyle
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Games Table
    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-games-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Sessions Table
    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-sessions-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: GameIdIndex
            KeySchema:
              - AttributeName: gameId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true

  Outputs:
    CloudFrontDomainName:
      Description: CloudFront distribution domain name
      Value: !GetAtt CloudFrontDistribution.DomainName